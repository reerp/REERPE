@model REERP.Models.ProductReceive

@{
    ViewBag.Title = "Edit received item";
    Layout = "~/Views/Shared/_MasterPage.cshtml";
}
<style type="text/css" class="init">
    th {
        white-space: nowrap;
    }
</style>
<link href="~/Content/katniss-template/css/jquery-ui.min.css" rel="stylesheet" />
@Styles.Render("~/Content/datatable")
@Scripts.Render("~/bundles/datatable")
<script src="/Content/katniss-template/js/jquery-ui.min.js"></script>


@using (Html.BeginForm("create", "ProductReceives", FormMethod.Post, new { id = "invoiceForm" }))
{
    @Html.AntiForgeryToken();
    <div class="form-layout">
        <div class="row mg-b-7">
            <div class="col-lg-8 text-right"></div>
            <div class="col-lg-4 text-right"><button type="button" class="btn btn-primary btn-sm mg-r-5"><i class="fa fa-save"> </i> Save </button> 
            <a class="btn btn-info btn-sm mg-r-5" href="@Url.Action("Invoice", "ProductReceives", new { id = Model.ProductReceiveId })"> <i class="fa fa-print"> </i> Print</a>     
            <a href="@Url.Action("Index","ProductReceives")" class="btn btn-danger btn-sm"><i class="fa fa-close"> </i> Cancel</a></div>

            </div>
    </div>
    <div class="form-layout">
        <div class="row mg-b-1">
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.Label("User", new { @class = "form-control-label" })
                    @Html.TextBoxFor(model => model.UserId, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.UserId), @readonly = "readonly", @Value = ViewBag.UserName })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.Branch, new { @class = "form-control-label" })
                    @Html.TextBoxFor(model => model.Branch.BranchName, new { @class = "form-control", @readonly = "readonly" })
                  
                    @* @Html.TextBoxFor(m => m.BranchName, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.UserName), @readonly = "readonly", @Value = ViewBag.BranchName })*@
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.Label("Invoice No", new { @class = "form-control-label" })
                    @Html.TextBoxFor(model => model.InvoiceNO, new { @class = "form-control", @readonly = "readonly" })
                    
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.Label("Date", new { @class = "form-control-label" })
                    @Html.TextBoxFor(model => model.DateReceived, new { @class = "form-control", @readonly = "readonly"  })
                   
     
                </div>
            </div>
        </div><!--row mg-b-1-->
    </div><!--form-layout-->
    <div class="form-layout">
        <div class="row mg-b-1">
            <div class="col-lg-4">
                <div class="form-group">
                    @Html.Label("Product", new { @class = "form-control-label" })
                    @* @Html.DropDownList("ProductId", (SelectList)ViewData["ProductList"], new { @class = "form-control" })*@
                    <input type="text" id="txtProduct" name="Product" class = "form-control"  placeholder="Select Product" />
                       
                    <input type="hidden" id="productId" name="productId" />
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.Label("Quantity", new { @class = "form-control-label" })
                    <input class="form-control" id="quantity" name="Quantity" type="text" placeholder="Enter Quantity">
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.Label("Unit Price", new { @class = "form-control-label" })
                    <input class="form-control" id="unitPrice" name="UnitPrice" type="text" placeholder="Enter Quantity">
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.Label("Unit Cost", new { @class = "form-control-label" })
                    <input class="form-control valid" id="unitCost" name="UnitCost" type="text" placeholder="Enter Unit Cost">

                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">

                    <label class="form-control-label"></label>
                    <a  id="addRow" class="btn btn-primary btn-block mg-b-10 mg-t-5 btn-add-item" href="#" productReceiveId="@ViewBag.ProductReceiveId"><i class="fa fa-plus"></i>  Add Item</a>
                </div>
            </div>
        </div>
    </div><!--form-layout-->
    <div>
        <table id="datatable1" class="display">
            <thead>
            <tr>
                <th>Product Name</th>
                <th>Unit Cost</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
            </tr>
            </thead>
            @foreach (var item in ViewBag.LineItem)
            {
            <tbody>
            <tr>
                <td>@item.Productname</td>
                <td>@item.UnitCost</td>
                <td>@item.UnitPrice</td>
                <td>@item.Quantity</td>
                <td></td>
                <td><a data-itemId="0" href="#" class="deleteItem">Remove</a></td>
            </tr>
            </tbody>  
                }
</table>
    </div>
}


<script>
    var productReceives = [];

    $.fn.dataTable.Api.register('hasValue()',
        function (value) {
            return this
                .data()
                .toArray()
                .toString()
                .toLowerCase()
                .split(',')
                .indexOf(value.toString().toLowerCase()) >
                -1;
        });
    $(document).ready(function () {

        var t = $('#datatable1').DataTable({
            dom: 'Bfrtip',
            buttons: [

                {
                    extend: 'print',
                    footer: true,
                    messageTop: $('#head').html()
                }
            ],
            "columnDefs": [{
                "targets": 3,
                "orderable": false
            }],
            bLengthChange: false,
            searching: false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;

                // Remove the formatting to get integer data for summation
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                        i : 0;
                };

                // Total over all pages
                total = api
                    .column(3)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                // Total over this page
                pageTotal = api
                    .column(3, { page: 'current' })
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                // Update footer
                $(api.column(3).footer()).html(
                    '$' + pageTotal + ' ( $' + total + ' total)'
                );

            }
        });
        var counter = 1;



        $('#addRow').on('click', function () {
            if ($.trim($("#txtProduct").val()) == "" || $.trim($("#unitPrice").val()) == "" || $.trim($("#quantity").val()) == "") {
                alert("Please add Item");
                return;
            }

            var productName = $("#txtProduct").val(),
                cost = $("#unitCost").val(),
                price = $("#unitPrice").val(),
                productId = $("#productId").val(),
                quantity = $("#quantity").val(),
                detailsTableBody = $("#datatable2 tbody");
            // alert(t.hasValue(productName));
            //alert(t.hasValue(productName));
            if (t.hasValue(productName)) {
                alert("Item Exsists");
                clearItem();
                return;
            }
            t.row.add([
                productName,
                cost,
                price,
                quantity,
                (parseFloat(price) * parseInt(quantity)),
                '<a data-itemId="0" href="#" class="deleteItem">Remove</a>'
            ]).draw(false);

            productReceives.push({
                ProductId: productId,
                Quantity: quantity,
                UnitCost: price
            });
            clearItem();
        });

        // Automatically add a first row of data
        //$('#addRow').click();
        //After Adding an item In The List, Clear Clean The Form For to Add More.
        function clearItem() {
            //$("#productName").val('');
            $("#txtProduct").val('');
            $("#price").val('');
            $("#quantity").val('');
            $("#productId").val('');
        }
        // After Add an item In The List, If You Want, You Can Remove It.
        $(document).on('click', 'a.deleteItem', function (e) {
            e.preventDefault();
            var $self = $(this);
            if ($(this).attr('data-itemId') == "0") {

                $(this).parents('tr').css("background-color", "#F30808").fadeOut(900, function () {

                    t.row(this).remove().draw(false);
                });
            }
        });

    });
    $(function () {
        $("#txtProduct").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/ProductReceives/AutoComplete/',
                    data: "{ 'prefix': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }))
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (e, i) {
                $("#productId").val(i.item.val);
                $("#unitPrice").val(i.item.price);
                $("#unitCost").val(i.item.cost);
            },
            minLength: 0
        }).focus(function () {
            $(this).autocomplete("search");
        });
    });
</script>
